#!/usr/bin/env python3
#pylint: disable=unused-import, unused-variable, unused-argument, useless-parent-delegation
# remove these disables once implemented
'''
This file contains the forecast drivers for a variety of apps
and physics suites.
'''

from .driver import Driver

class SRWFV3Forecast(Driver): # pragma: no cover
    #remove pragma when completed

    '''
        Concrete class to handle UFS Short Range Weather app forecasts.
        FV3 (ATM-only) mode.
    '''

    def __init__(self, argv):
        '''
            Initialize the Forecast driver.

        '''
        super().__init__(argv)

    def requirements(self):

        ''' Recursively parse config and platform files to determine and
         fill in any dependencies. '''

    def resources(self):

        ''' Determine necessary task objects and fill in resource requirements of each.
         Returns a Config object containing the HPC resources needed.'''

    def validate(self):

        ''' Validates the objects generated by the driver from the provided
        config and platform files.'''

    def create_model_config(self):

        ''' Collects all the user inputs required to create a model config 
        file, calling the existing model config tools. This will be unique
        to the app being run and will appropriately parse subsequent stages
        of the workflow. 
        Defaults will be filled in if not provided by the user. Equivalent 
        references to config_default.yaml or config.community.yaml from SRW
        will need to be made for the other apps. '''

    def stage_fix_files(self):

        ''' Holds the knowledge for how to modify a list of fix files and 
        stages them in the working directory. Likely gets all its info from 
        config_obj. Calls data mover tool (could be python copy). Fix files 
        usually are specific to a given named grid and resolution. '''

    def create_namelist(self):
        ''' Collects all the user inputs required to create a namelist 
        file, calling the existing namelist config tools. For SRW,
        this will take the fix files and model_config previously created to
        to generate config.yaml'''

    def output(self):
        ''' Create list of SRW output files and stage them in the working 
        directory.'''

    def job_card(self):
        ''' Turns the resources config object into a batch card for the 
        configured Task.'''

    def run(self):
        ''' Runs the forecast executable with the namelist file and staged
        input files. This will both build the executable and run it. '''
