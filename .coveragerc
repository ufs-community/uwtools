# .coveragerc to control code coverage tool
# https://coverage.readthedocs.io/en/latest/config.html

[run]
# Path where source is stored
source = workflow-tools/

# Omit some source code patterns when computing code coverage
omit =
    # exclude file utilities
    */src/utils/*
    # exclude drivers in progress
    */src/uwtools/drivers/*
    */src/uwtools/apps/*

# Add a dynamic context (to see what test file coverage a given line of code)
# with `--cov-context=test` command line only
# It needs `pytest-cov` (not part of standard Coverage.py tool)
# https://coverage.readthedocs.io/en/latest/contexts.html#dynamic-contexts
# https://pytest-cov.readthedocs.io/en/latest/contexts.html
#context = ...

# whether to measure branch coverage in addition to statement coverage.
# https://coverage.readthedocs.io/en/latest/branch.html#branch
branch = True

[report]
# number of digits after the decimal point to display for reported coverage percentages
precision = 2

# Any line of your source code containing a match for one of these regexes is excluded from being reported as missing.
# You can exclude lines introducing blocks, and the entire block is excluded. If you exclude a def line or decorator line, the entire function is excluded.
# https://coverage.readthedocs.io/en/latest/excluding.html#excluding
exclude_lines =
    # skip any line with a `pass` (such as may be used for @abstractmethod or @suffixed_method)
    pass

    # standard pragma
    pragma: no cover

    # skip blocks reserved for type checking
    if TYPE_CHECKING:

# when running a summary report in terminal, show missing lines
# show_missing = True

# don’t report files that are 100% covered. This helps you focus on files that need attention.
# skip_covered = True

# don’t report files that have no executable code (such as __init__.py files)
skip_empty = True

[html]
# where to write the HTML report files
directory = htmlcov

# title of HTML page
title = Leaspy - Code coverage report

# To view the dynamic context (cf. above) in HTML report
show_contexts = True

[xml]
# where to write the XML report
output = coverage.xml
